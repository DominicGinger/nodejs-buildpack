#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

set -e
set -o pipefail   # dont ignore exit codes when piping output
set -o nounset    # fail on unset variables
unset GIT_DIR     # Avoid GIT_DIR leak from previous build steps

### Constants

DEFAULT_CACHE=".npm .cache/yarn bower_components"

### Configure directories

BUILD_DIR=$1
CACHE_DIR=$2
DEPS_DIR=$3
DEPS_IDX=$4
BP_DIR=$(cd $(dirname ${0:-}); cd ..; pwd)
$BP_DIR/compile-extensions/bin/check_stack_support
$BP_DIR/compile-extensions/bin/check_buildpack_version $BP_DIR $CACHE_DIR

cd $BUILD_DIR

# CF Common
export BUILDPACK_PATH=$BP_DIR
source $BP_DIR/compile-extensions/lib/common
# END CF Common

LOG_FILE='/tmp/node-build-log.txt'
echo "******* START SUPPLY *******" >> "$LOG_FILE"

### Load dependencies

source $BP_DIR/lib/output.sh
source $BP_DIR/lib/json.sh
source $BP_DIR/lib/failure.sh
source $BP_DIR/lib/environment.sh
source $BP_DIR/lib/binaries.sh
source $BP_DIR/lib/cache.sh
source $BP_DIR/lib/dependencies.sh

### Handle errors

handle_failure() {
  header "Build failed"
  warn_untracked_dependencies "$LOG_FILE"
  warn_angular_resolution "$LOG_FILE"
  warn_missing_devdeps "$LOG_FILE"
  warn_econnreset "$LOG_FILE"
  warn_young_yarn "$LOG_FILE"
  failure_message | output "$LOG_FILE"
}
trap 'handle_failure' ERR

### Check initial state

[ -e "$BUILD_DIR/node_modules" ] && PREBUILD=true || PREBUILD=false
[ -f "$BUILD_DIR/yarn.lock" ] && YARN=true || YARN=false

### Failures that should be caught immediately

fail_invalid_package_json "$BUILD_DIR"
warn_prebuilt_modules "$BUILD_DIR"
warn_missing_package_json "$BUILD_DIR"

### Supply

header "Creating runtime environment"
list_node_config | output "$LOG_FILE"

install_bins() {
  local node_engine=$(read_json "$BUILD_DIR/package.json" ".engines.node")
  local iojs_engine=$(read_json "$BUILD_DIR/package.json" ".engines.iojs")
  local npm_engine=$(read_json "$BUILD_DIR/package.json" ".engines.npm")
  local yarn_engine=$(read_json "$BUILD_DIR/package.json" ".engines.yarn")

  if [ -n "$iojs_engine" ]; then
    echo "engines.iojs (package.json):  $iojs_engine (iojs)"
  else
    echo "engines.node (package.json):  ${node_engine:-unspecified}"
  fi
  echo "engines.npm (package.json):   ${npm_engine:-unspecified (use default)}"
  echo ""

  mkdir -p "$DEPS_DIR/$DEPS_IDX/node"
  if [ -n "$iojs_engine" ]; then
    warn_node_engine "$iojs_engine"
    install_iojs "$iojs_engine" "$DEPS_DIR/$DEPS_IDX/node"
    echo "Using bundled npm version for iojs compatibility: `npm --version`"
  else
    warn_node_engine "$node_engine"
    install_nodejs "$node_engine" "$DEPS_DIR/$DEPS_IDX/node"
    install_npm "$npm_engine" "$DEPS_DIR/$DEPS_IDX/node"
  fi

  ## Create bin symlinks
  pushd "$DEPS_DIR/$DEPS_IDX/bin"
  ln -s ../node/bin/* .
  popd
  export PATH="$DEPS_DIR/$DEPS_IDX/bin:$PATH"

  if $YARN; then
    mkdir -p "$DEPS_DIR/$DEPS_IDX/yarn"
    install_yarn "$DEPS_DIR/$DEPS_IDX/yarn" "$yarn_engine"

    ## Create bin symlinks
    pushd "$DEPS_DIR/$DEPS_IDX/bin"
    ln -s ../yarn/bin/* .
    popd
  fi
}

header "Installing binaries"
install_bins | output "$LOG_FILE"

header "Writing config"
mkdir -p "$DEPS_DIR/$DEPS_IDX/env"
echo "$DEPS_DIR/$DEPS_IDX/node" > "$DEPS_DIR/$DEPS_IDX/env/NODE_HOME"
export NODE_ENV=${NODE_ENV:-production}
echo $NODE_ENV > "$DEPS_DIR/$DEPS_IDX/env/NODE_ENV"

mkdir -p "$DEPS_DIR/$DEPS_IDX/profile"
echo -e "export NODE_HOME=\"\$DEPS_DIR/$DEPS_IDX/node\nexport NODE_ENV=$NODE_ENV" > "$DEPS_DIR/$DEPS_IDX/profile/node.sh"
